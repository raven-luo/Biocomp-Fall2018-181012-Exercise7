a=(Abby,Britney,Cat,Diane,Evey)
a=Abby,Britney,Cat,Diane,Evey
a=1,2,3,4,5
a<-5
a=c("abby","britney","cat","diane","Evey")
a[3]
a[1,2]
a[1:2]
M=matrix(1;4,nrow=2,ncol=2)
M=matrix(1:4,nrow=2,ncol=2)
View(M)
a=list(a,M)
a=c("abby","britney","cat","diane","Evey")
b=list(a,M)
View(M)
b[[1]][4]
b[[1]][4:5]
b[[1]][4,5]
halfmin=function(series){
halfmin=min(series)/2
return(halfmin)
}
halfmin(c(3,2,1))
halfmin(c(3,2,1))
halfmin(c(3,2,1),3)
halfmin=function(series,divideby=2){
halfmin=min(series)/divideby
return(halfmin)
}
halfmin(c(3,2,1),3)
local=function(local){
output=local/global
return(output)
}
local(3)
local=function(local){
output=local/global
return(output)
}
global=3
local(3)
local(3)
local=function(local){
output=local/global
return(output)
}
global=2
local(3)
local=function(local){
output=locali/global
return(output)
}
global=2
local(3)
locali
rm(list=ls())
setwd("C:/Users/raven/Desktop/biocomputing/exercise7/Biocomp-Fall2018-181012-Exercise7")
#task1: return odd rows of any data frame
odd=function(data_frame){
rownames=1:nrow(data_frame) # a vector of all the row numbers
odd_items=rownames%%2==1 # a vector of TRUE/FALSE of whether each row is divisible by 2
odd_rows=data_frame[odd_items,] # will index all the rows that leave the remainder of 1 (TRUE) when divided by 2, ie all odd rows
return(odd_rows) # return all the odd rows
}
iris=read.csv(file="iris.csv",header=TRUE,stringsAsFactors=FALSE)
odd(iris) # Usage example
speciescount=numeric((nrow(iris)))
View(iris)
View(iris)
iris=read.csv(file="iris.csv",header=TRUE,stringsAsFactors=FALSE)
observations=function(species){
speciescount=numeric((nrow(iris)))
for (i in 1:nrow(iris)) {
if (iris[i,5]==species) {speciescount[i]=1}
}
speciestally=sum(speciescount)
print(speciescount)
}
observations(setosa)
speciescount=numeric((nrow(iris)))
for (i in 1:nrow(iris)) {
if (iris[i,5]==species) {speciescount[i]=1}
}
speciestally=sum(speciescount)
print(speciescount)
observations=function(species){
speciescount=numeric((nrow(iris)))
for (i in 1:nrow(iris)) {
if (iris[i,5]==species) {speciescount[i]=1}
}
speciestally=sum(speciescount)
print(speciestally)
}
speciescount=numeric((nrow(iris)))
for (i in 1:nrow(iris)) {
if (iris[i,5]==species) {speciescount[i]=1}
}
speciestally=sum(speciescount)
print(speciestally)
observations=function(species){
speciescount=numeric((nrow(iris)))
for (i in 1:nrow(iris)) {
if (iris[i,5]==species) {speciescount[i]=1}
}
speciestally=sum(speciescount)
print(speciestally)
}
observations(setosa)
iris=read.csv(file="iris.csv",header=TRUE,stringsAsFactors=FALSE)
observations=function(species){
speciescount=numeric((nrow(iris)))
for (i in 1:nrow(iris)) {
if (iris[i,5]==species) {speciescount[i]=1}
}
speciestally=sum(speciescount)
print(speciestally)
}
observations(setosa)
observations("setosa")
(iriscountspecies=as.data.frame(table(iris$Species)))
observations("setosa"|"virginica")
observations("se")
observations("virginica")
observations("versicolor")
iris=read.csv(file="iris.csv",header=TRUE,stringsAsFactors=FALSE) #read in the file iris first
observations=function(species){
speciescount=numeric((nrow(iris))) #first create a numeric vector that contains 0s, each one corresponding to a row in iris
for (i in 1:nrow(iris)) {
if (iris[i,5]==species) {speciescount[i]=1} #loop through each row in iris. If species name matches, set that corresponding index in the speciescount vector to 1
}
speciestally=sum(speciescount) #sum the speciescount vector. The sum=1*number_of_times_species_name_matched=
return(speciestally)
}
observations("setosa") #Usage example
#task2.1: return number of observations for a given species included in iris
iris=read.csv(file="iris.csv",header=TRUE,stringsAsFactors=FALSE) #read in the file iris first
observations=function(species){
speciescount=numeric((nrow(iris))) #first create a numeric vector that contains 0s, each one corresponding to a row in iris
for (i in 1:nrow(iris)) {
if (iris[i,5]==species) {speciescount[i]=1} #loop through each row in iris. If species name matches, set that corresponding index in the speciescount vector to 1
}
speciestally=sum(speciescount) #sum the speciescount vector. The sum=1*number_of_times_species_name_matched=number_of_observations_for_that_species
return(speciestally) #return that count
}
observations("setosa") #Usage example
(iriscountspecies=as.data.frame(table(iris$Species))) #Check against this frequency table
iris=read.csv(file="iris.csv",header=TRUE,stringsAsFactors=FALSE)
widesepal=function(x){
widesepal_frame=iris[iris[,2]>x,]
return(widesepal)
}
widesepal(3.5)
widesepal=function(x){
widesepal_frame=iris[iris[,2]>x,]
return(widesepal_frame)
}
widesepal(3.5)
(irisbigsepal=iris[iris$Sepal.Width>3.5,])
widesepal(3.7) #Usage example
iris[iris$Sepal.Width>3.7,] #Check against this
if (widesepal(3.7)==iris[iris$Sepal.Width>3.7,]) {print("correct")} #Check against this
if (widesepal(3.7)=iris[iris$Sepal.Width>3.7,]) {print("correct")} #Check against this
if (all(widesepal(3.7)==iris[iris$Sepal.Width>3.7,]) {print("correct")} #Check against this
all(widesepal(3.7)==iris[iris$Sepal.Width>3.7,] #Check against this
all(widesepal(3.7)==iris[iris$Sepal.Width>3.7,]) #Check against this
all(widesepal(3.7)==iris[iris$Sepal.Width>3.7,]) #Check against this
species_csv(setosa)
iris=read.csv(file="iris.csv",header=TRUE,stringsAsFactors=FALSE)
species_csv=function(species){
write.table(iris[iris$Species==species,],file=paste(species,".csv"),sep=",")
}
species_csv(setosa)
iris=read.csv(file="iris.csv",header=TRUE,stringsAsFactors=FALSE)
species_csv=function(species){
write.table(iris[iris$Species==species,],file=paste(species,".csv"),sep=",")
}
species_csv("setosa")
write.table(iris[iris$Species=="virginica",],file="virginica.csv",sep=",")
iris=read.csv(file="iris.csv",header=TRUE,stringsAsFactors=FALSE)
species_csv=function(species){
write.table(iris[iris$Species==species,],file=paste(species,".csv",sep=""),sep=",")
}
species_csv("setosa")
rm(list=ls())
setwd("C:/Users/raven/Desktop/biocomputing/exercise7/Biocomp-Fall2018-181012-Exercise7")
odd=function(filename){
data_frame=read.csv(file=filename,header=TRUE,stringsAsFactors=FALSE)
rownames=1:nrow(data_frame) # a vector of all the row numbers
odd_items=rownames%%2==1 # a vector of TRUE/FALSE of whether each row is divisible by 2
odd_rows=data_frame[odd_items,] # will index all the rows that leave the remainder of 1 (TRUE) when divided by 2, ie all odd rows
return(odd_rows) # return all the odd rows
}
odd("iris.csv") # Usage example
observations=function(filename,species){
data_frame=read.csv(file=filename,header=TRUE,stringsAsFactors=FALSE)
speciescount=numeric((nrow(data_frame))) #first create a numeric vector that contains 0s, each one corresponding to a row in iris
for (i in 1:nrow(data_frame)) {
if (data_frame[i,5]==species) {speciescount[i]=1} #loop through each row in iris. If species name matches, set that corresponding index in the speciescount vector to 1
}
speciestally=sum(speciescount) #sum the speciescount vector. The sum=1*number_of_times_species_name_matched=number_of_observations_for_that_species
return(speciestally) #return that count
}
observations("iris.csv","setosa") #Usage example
(iriscountspecies=as.data.frame(table(iris$Species))) #Check against this frequency table
observations("iris.csv","virginica") #Usage example
observations("iri.csv","virginica") #Usage example
observations("iris.csv","virginica") #Usage example
(iriscountspecies=as.data.frame(table(iris$Species))) #Check against this frequency table
#task2.2: return dataframe for flowers with Sepal.Width>=some value in some data set
widesepal=function(filename,x){
data_frame=read.csv(file=filename,header=TRUE,stringsAsFactors=FALSE)
widesepal_frame=data_frame[data_frame[,2]>x,] #Sepal width is column 2. If 2nd column>x, then for that row, index all the columns
return(widesepal_frame)
}
widesepal(3.7) #Usage example
all(widesepal(3.7)==iris[iris$Sepal.Width>3.7,]) #Che
widesepal=function(filename,x){
data_frame=read.csv(file=filename,header=TRUE,stringsAsFactors=FALSE)
widesepal_frame=data_frame[data_frame[,2]>x,] #Sepal width is column 2. If 2nd column>x, then for that row, index all the columns
return(widesepal_frame)
}
widesepal("iris.csv",3.7) #Usage example
all(widesepal("iris.csv",3.7)==iris[iris$Sepal.Width>3.7,]) #Check against this. Returns TRUE, meaning the two data sets have the same values
#task2.3: write data for a species from some data set to a new csv file titled speciesname.csv
species_csv=function(filename,species){
data_frame=read.csv(file=filename,header=TRUE,stringsAsFactors=FALSE)
write.table(data_frame[data_frame$Species==species,],file=paste(species,".csv",sep=""),sep=",")
}
species_csv("iris","virginica") #Usage example
species_csv=function(filename,species){
data_frame=read.csv(file=filename,header=TRUE,stringsAsFactors=FALSE)
write.table(data_frame[data_frame$Species==species,],file=paste(species,".csv",sep=""),sep=",")
}
species_csv("iris.csv","versicolor") #Usage example
